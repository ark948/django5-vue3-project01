frontend structure:
    framework: Vue 3 (node.js)
    routing: vue-router
    state management: Pinia
    form package: Vee-Validate
    form validation: Yup
    

1. initial frontend setup
    frontend> npm init vue@latest .
    > project name: frontend
    npm install
    npm run dev

    delete components folder
    completely clean App.vue
    clear everything in assets/main.css except the import at the top

2. adding router
    npm install vue-router
    1. create a router instance inside router folder
    2. the root path will be using HomeView as component option (although it isn't a component but a view)
    3. export the router
    4. register the router in main.js
    5. use router link in App.vue

3. adding home view (as same time as router, router needs at least one component)
    create views folder, components folder, styles folder
    create a HomeView folder in views

4. adding register feature
    register feature will have a component that will render the registration form
    no need for a seperate registerView, it can be rendered in home view
    register form done,
    bind input values to state variable (we use v-model to quickly achieve this...)
    (instead of manully get the event target value)
    (althou i want to see what happens if we don't)
    (quick idea, let's just create a test post request)
    (check if csrf_token is there)
    testuser02@gmail.com-Max-Payne-home123*
    fixed huge problem: for data with multiple parts use reactive instead of ref
    use ref for primitive data structures like int and string
    done - may need some small cleaning
    after successful registration, navigate to otp email verification page
    for that, use router.push({name: ''}) (import the router object)

5. adding a test connection - GET (ok)
    create a new component called GetData.vue
    this component will get some sample data from backend using axios
    and will be rendered in home
    process:
    component added,
    path added,
    link in HomeVue,
    create view in backend: done + url
    need to install axios, done
    adding .env file with backend api address and port in it
    creating axios config in api.js
    need to configure cors in backend
    the url in env not working

6. adding a test connection - POST
    first version without using state variable (ok)
    second version using reactive variables (ok)

7. fixing axios api baseURL
    fixed baseURL, trailing slash was required

8. Email verification process:
    small problem...
    after successful registration, we are automatically recirected to email verification page
    this makes successful registration message moot.
    need a way to display kind of a floating notification message
    adding vue3-notification package by @kyvg
    > npm install --save @kyvg/vue3-notification
    add it to main.js
    add global component to App.vue
    done, but looks terrible and i have not been able to customize it.
    version 2 is better
    version 3 using axios' own doc (moving on for now)

9. adding login
    login component
    trying to render login component in HomeView (not working)
    saving user info in localstorage...
    need a way to create protected routes (only accessible to logged in users)
    only logged in users should be able to access Profile page
    using something called navigation gaurds (provided by vue-router)
    in router file, we are going to protect profile route

    first approach: Per-Route Gaurd
    another possible approach: Route Meta Fields

    need to use axios interceptors as well

    we need something else as well, State Management with vuex or Pinia

10. testing TestAuthenticationView from TestAuth.vue

11. setting up Pinia (for State Management)
    for smaller single page applications, vue itself, does have a global state management solution.
    it is also possible to implement this, using props and having a shared parent component.
    but in larger projects and deeper trees of hierarchy, this causes an issue known as Prop Drilling.
    same goes with using refs or emitted events. all lead to unmaintainable code.
    - Simple State Management with Reactivity API:
    we can use reactive for this. Also not recommended.
    the only recommended approach is using a dedicated state management library such as vuex or Pinia.

    setting up Pinia:
    > npm install pinia
    - create pinia instance in main.js
    - documentation does not explain how to structure store files or even where to put the code
    - making my own stores folder
    - adding route protection to router.js
    (note), upon successful login post request, user info must be saved into localStorage AND pinia state
    same goes with logout (remove from both)
    installing vee-validate and yup
    -login component (v2) will send the information to auth store
    auth store will do the login request process
    if login successful, auth store will save the user info in localStorage and pinia global storage
    from then, if a component needs to check if user is logged in, it can use the pinia global storage
    logout button will be placed in profile component now, and later will be added to Nav component
    complete the login v2 later
    Nothing works.
    resetting everything, modifying backend to return only a user object
    and starting over
    login complete with the help of "Jason Watmore's tutorial"

12. adding authorization headers
    need to use axios interceptors (on requests)
    but first, let's test send a request with out any interceptors or hoeaders...
    to a auth required django view,
    sending get witout being logged in: returned 401 (UnAuthorized)
    sending get with being logged in but no header: returned 401 (UnAuthorized)
    sending get with being logged in and headers: still pending... update:
    success, but has a very small unexpected behavior, sometimes, even though...
    user is logged in and token exists, returns 401,
    but upon refresh, everything works fine.
    heavily modifying api.js

    (what to do when access token is expired?)
    we can ask the user to re-login, but this is a terrible idea (UX wise).
    instead, we should automatically renew the access token by using refresh_token.
    to implement this, we will use axios interceptors but for responses (implement later)
    (nevermind that, just adding a simple date check to see if refresh token is expired)
    in api.js
    need to test this by changing access_token lifetime to a very short time.
    this is not working, token won't expire. 

    update: token expiration and refreshing works, need to duplicate it.

    (also not let logged in users access login page) (done, maybe later add improved version)

13. frontend for bookmarker app:
    Bookmarks page will contain bookmarkslist component
    bookmarkslist will contain nested component of each individual bookmark item

    bookmarkslist will get a list of user's bookmarks, and will use props to pass the id, title, url and ... to bookmark component
    upon clicking on an individual bookmark component, a modal will open up, displaying item's info for editing
    maybe item's title can be edited in bookmarkslist with some sort of a editable table component

    two tasks: show modal window (in progress)
               display data in live table
    some refactoring: moving all auth related conponents
    deleting all unused codes and files
    (refactoring done)

    adding lots of bookmark records to user in backend
    using primevue to display bookmark records in table
    > npm install primevue
    > npm install @primevue/themes (theme add-ons)
    - configure main app to use primevue in main.js
    - using DataTable component in bookmarkslist.vue
    VERY GOOD, need dialog component to add new bookmarks

14. Adding pagination,
    approach 1, get all data, paginate in frontend (done)
    approach 2, paginate in backend, specify page query param in frontend (skipped...)

15. New bookmark function
    should be a modal window
    using dialog component from primevue (also using Button component)
    trying to add it to bookmarkslist.vue
    in order to prevent api.js from getting too large, i will move all bookmarker specific logic to its own api file
    (will implement this later)
    done, but small problem, need to refresh the table [FIXED]

16. Delete functionality
    single delete function is done,
    by using the checkboxes in table, bulk delete can also be achieved.
    in this way, for every selected item, one delete request will be sent to backend
    this may cause traffic issues

    i will put in a separate view in backend so it can be fully differentiated

    multiple delete feature in frontend complete. needs a confirm dialog.
    confirm dialog added.

17. edit feature
    is bulk edit possible? don't think so,
    maybe quick edit using primevue table?
    or a link for all records to open their detail dialog window.
    need to add a custom column to bookmarks table
    i can't add a custom column with a link to primevue DataTable component
    trying another library, Vuetify
    > npm i vuetify


    Huge problem: text boxes and check boxes not displaying at all.
    (in all pages)
    - attempting to remove eslint.config.js (not working)
    - attempting to remove vuetify instance (not working)
    - attempting to hard reload from browser (not working)
    tried edge browser, problem persists
    - found what causing problem, vueitfy imports (there are 4)
    - trying to find exactly which one of them
    exactly the first one: // import 'vuetify/styles'; (it conflicts with other styles)
    - trying to move this line to the only component that needs it
    there are some sorts of mentions in vuetify doc, something about css reset
    and a link to disable this, but that link is 404

    - While trying to fix this issue, found another problem...
    going to bookmarks page, manual refresh is required to load the table data


18. trying another ui library (Vuestic UI)
    this will be the last ui library i am going to try, if this does not work either,
    i will revert back to primevue
    > installing
    npm install vuestic-ui
    download the css file and link it in main html file (index.html) in head element
    modify the main entry point main.js (globally, it can also be installed per-component)
    (but that requires further steps)
    - this step did change some stuff globally, like font
    

19. Came back to Primevue, made it work
    removing all other libraries, vuestic ui, vueitfy

20. sending csv file to server entirely or read it in frontend and then send it as a long data