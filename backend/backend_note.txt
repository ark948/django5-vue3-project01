bookmarker project + browser extension:
quickly bookmark any page
(free version) -> only bookmarks + extension
(paid version) -> bookmarks + folders + categories + 
    bookmark includes account (email, username, password encrypted), + note + sharing + 
    csv export and import + export to browser, import from browser +
    page is up test (status code check)
    
Saving tokens in localStorage is not a secure.

1. basic setup:
    pip install django djangorestframework
    pip install django-cors-headers
    django-admin startproject server .
    add rest_framework, corsheaders to INSTALLED_APPS
    python manage.py startapp accounts
    add accounts to INSTALLED_APPS (local apps go lowest)
    pip install django-environ
    pip install djangorestframework-simplejwt

2. environment variables:
    import django-environ
    create an env instance
    add default debug value to that instance
    create a .env file next to server folder
    make env instance to read from that file
    move secet_key and debug to .env file
    update settings.py (secet_key and debug) to read from env instance

3. add configs:
    add cors headers middleware to MIDDLEWARES above common middleware or whitenoise
    add REST_FRAMEWORK config to settings.py
    add SIMPLE_JWT to settings.py (configs for tokens)

4. custom user model
    add custom user model to accounts (should be called CustomUser to avoid conflict)
    add OTP model to accounts (could be added later as well)
    update/add AUTH_USER_MODEL to settings.py
    add UserManager to managers.py in accounts
    add CustomUser to admin.py in accounts
    make and apply migrations
    python manage.py makemigrations (optional: accounts)
    python manage.py migrate
    create superuser: admin@example.com-Arman-Karimi-shit123*
    python manage.py createsuperuser
    add tests

5. adding auth routes (register and verifyEmail):
    added register serializer
    add register view
    added a url path for register
    requires utils (send_otp_to_user and generate_otp) (not working-email not sending) (fixed)
    email backend needed to be set in settings.py (set to console backend)
    testuser01@gmail.com-Nick-Tole-home123* UPDATE PASSWORD using reset password feature: home123
    adding email verification view
    email verification serializer that only has one field (otp)
    adding url (ok)

6. configuring CORS:
    corsheaders must exist in INSTALLED_APPS
    add CORS_ALLOWED_ORIGINS and  CSRF_TRUSTED_ORIGINS to settings.py

7. adding login:
    add login serializer
    add login view to accounts/views.py
    login serializer uses RefreshToken from djangorestframework_simplejwt to generate...
    access token and refresh token for user (it is a method in CustomUser model)
    this requires installation of djangorestframework_simplejwt (if not installed yet)
    also SIMPLE_JWT and REST_FRAMEWORK (authentication class) config must exist in settings.py
    add url for login
    test the login with testuser01@gmail.com-Nick-Tole-home123*
    test was successful, email, full_name, access and refresh token were returned

8. add test view (accessible to logged in users only)
    (i previously tested this using httpie, now use frontend)
    add test view (test this in frontend)

9. added a post test request in api (ok)
10. logout needs to be added
    add rest_framework_simplejwt.token_blacklist to isntalled_apps
    run migrations

11. IMPORTANT: Adding basic and session authentication from official docs:
(ALONGSIDE current jwt authentication)
(to be used with browsable api only)

user's bookmark list no option to add bookmarks. fixed.
deleting the old ones, (for user testuser01)
adding 10 actual bookmarks.
problem 01: user should not be able to choose the owner in listcreate api view. [FIXED]
problem 02: bookmark item title max length too short. [FIXED]

12. Adding pagination to bookmarer
    add pagination config to settings.py (add to REST_FRAMEWORK config)
    done, but console gets a small warning about pagination
    warning in pagination: unordererd list, pagination may yield inconsistent results
    
13. Upgrading bookmarks list view from listcreate api to listcreatedestroy api
    there is not such generic view
    trying to utilize viewset + router
    in viewset views, we can use action decorator to create a multiple delete items action by setting detail to false

14. according to some docs and notes online, deleting multiple objects is not a good idea
    in restful design, since delete http verb should be used with one object only
    but we can use a post request to collect a multiple ids from request body
    then perform the delete in backend.

15. csv export is done in frontend, for csv import some backend code is required.
    i want to get the file, read its data, and not store it in database or filesystem

16. added password reset feature
    main authentication app: accounts
    backup authentication app (education purposes only)
    PROBLEM: token validation not working, i think the problem is with "AuthenticationFailed"


17. parsers and renderers:
    (i will apply this to accounts app)
    parsers: allows to accept requests with various media types
    renderers: allows to return responses with various media types

    all views perform content-negotiation:
    1. examine the request 'Accept' header to determine which media type to expect in response
    2. format suffixes may be used for this

    1. setting the renderer
    can be done global level or per-view level, done in accounts>api>views
    TemplateHTMLRenderer no need for serialzier.
    serializer can be used, but data will need to be wrapped in a dict
    should use a template_name
    
    You can use TemplateHTMLRenderer either to return regular HTML pages using REST framework, 
    or to return both HTML and API responses from a single endpoint.

    project structure update:
        apps will have three type of views, regular views that will render html templates and 
        api views. api views will have two type of views, with json responses, and with html responses
        (using parsers, renderers, and content negotiation)
        each app will have only one urls.py file.
    
    in order to understand the entire django testing topics, i will implement regular html views as well
    installed django crispy forms (no template pack)
    also do not forget to add template caching to entire django project and django crispy forms
    django-crispy-forms uses something called FormHelpers

    to add authentication: 
    there are two common ways: django's built-in auth, or django-allauth package
    i will implement both, in separate urls

    1. explicitly specify authentication backend

    builtin UserCreationForm and UserChangeForm cannot be used with our CustomUser model, no username field
    unless exclude is used to remove username field

    IMPORTANT: use function based views for html responses with api
    and class-based views for regular views in views/views.py

    three authentication methods:
    basic authentication (every time a request is made, auth headers must be sent - NOT USED)
    tokens (using jwt - currently django rest framework uses this)
    sessions and cookies (our html views in accounts app uses this)

    next url upon successful login added successfully
    
    problem in forms>EmailChangeForm (nope, validate_email works fine html forms)

    for change email view, in both html and json response views...
    validate_email always returns false, for some reason.
    i checked the same email address to register a new user, and it was fine.



18. added new model to bookmarker app: Category
    each bookmark can have one Category
    each category can have multiple bookmarks
    - add Category model to admin.py



19. need add employee members that have permission to add category
    regular users must not be able to do so
    groups and permissions:
    User object has two many-to-many fields: groups, user_permissions
    my basic idea, with no knowledge of groups and permissions in django:
    two groups: users and employees:
        users can view/add/edit/delete bookmark model
        employees can view/add/edit/delete Category model
        special users: can access members-only features of the site (such as creating their own category)
    - to create custom groups, i will create groups.py in accounts app
    eventually custom groups need to be registered in admin
    but admin.py of what app?
    i guess, each group needs to be in the app that will directly use:
        employees -> accounts app (or their own app later)
        members -> bookmarker app
        i will try to create their own app (employees)
        added groups.py and in it, the new Custom Group called employees
        add app to INSTALLED_APPS
        registered it in app's admin
        now, need to run migrations
    Category_moderators added using admin interface
    permissions for this group were also added.
    now need to add certain users to this group.
    need to divide users into members and employees.
    need to derive from user into other types of user
    i will create a userProfile model with one to one relationship to CustomUser
    UserProfile will have a 'belongs_to' field and Role field
    belongs_to will contain the list of group ids that userProfile is in
    and role contains a choices.
    to automatically create a user profile every time a customuser is created,
    we use singals. add it to accounts/signals.py
    also add UserProfile to accounts>admin.py

    now a summary before running make and migrate database:

    - created new app specially for employees
    - added a new group to employees app, called EmployeesGroup
    - added UserProfile model to accounts models
    - added a signal to call every time a UserProfile is created, in accounts/signals.py
    - added UserProfile to accounts/admin.py

    so now every new information we need can be added to UserProfile
    mostly anything unrelated to authentication
    groups with different permissions will be created.
    and UserProfiles can be in different groups.

    we can create custom permission decorator to check if the UserProfile of the current user exists...
    in a specific group, if so, then allow some action.
    let's try migrating... (also navigating database migrations is very important)

    had to add another group for regular users
    problem: Adding users to groups not working, members section of groups not working.

    need to take a few steps back.
    first unregister all groups.
    now need to revert back migrations.

    unlisted employees app.
    employees app has one migration. need to revert it back.
    to reverse all migrations applied for an app:
    > python manage.py migrate <appName> zero
    error: in order to use this command, employees app must be listed in installed_apps
    accounts app has 3 migrations now, 
    0001: initial (CustomUser)
    0002: userprofile
    0003: regularusers
    definitely, 0003 needs to be reverted.
    so i will select one before that,
    > python manage.py migrate accounts 0002
    need to remove all code as well, everything except UserProfile,
    all groups.py files, and all new admin registers. done
    there are two groups visible in admin interface under Groups section:
    Category_moderators and Regular Users, (deleting them both, done)
    only thing that still remains is Category model. (apparently works ok)
    now need to make UserProfile work,
    new test signals, by adding a user and see if a new user profile is created.
    also add userprofile to admin.
    problem fixed by moving signal to models.py right below UserProfile model.
    now signals.py is useless. (problem for later)
    now that we have regular users, let's first try adding them to their own group.
    trying to add a CustomGroup in accounts/groups.py.
    trying to add the custom group to accounts/admin.py
    i think i need to run migrations...
    problem persists, users cannot be added to groups.
    i can only see one option, reverting back even further...
    to 0001 of accounts app, even before adding user profiles.
    the problem may be with CustomUser, it is inheriting from abstractBaseUser
    according to WSV, using abstractBaseUser is much more complex than using abstractuser
    CONFIRMED, this is exactly the cause of problem. either that, or something between my customuser model,
    or how it is registered in admin
    can think of anything, but to remove everything new thing and even all migration files,
    and even the database file.
    creata new custom user from a better source.
    this time with session authenticaction for backend views, and jwt authenticaction only for api.

    deleted all accounts/ migration files
    adding new and improved CustomUser and UserProfile right away.
    also deleted apps folder, it was useless.
    before moving to another CustomUser model, going to try to check if the prevoius functionality still works.
    things work fine.

20. Moving on to another CustomUser model.
    (in new users app, keeping the old one as reference or something like legacy code)
    (maybe later i'll move it to apps folder)
    - after the new user model ready, update AUTH_USER_MODEL
    error while trying to make migrations for users app, seems like some sort of conflict 
    between accounts and users custom user.
    deleted old database file and all references to accounts app.
    trying to run makemigrations again, ok, errors seem to have reduced in number.
    eventually was able to run migrations, by redefining email field as unique,
    forgot to actually call migrate after makemigrations
    having it declared as username field, and declaring an empty requried fields.
    next steps are adding forms and registering in admin.
    done and added a second migration.
    attempting to create a superuser
    error: missing 1 required positional arguemnt 'username'
    can't do this anymore, will use django-allauth to enable email only login.
    deleting migration files and database.
    appears to be fine, admin user created successfully. user profile also appears to be created.
    thinks look ok.
    since the entire frontend works with email/password...
    need to add django-allauth right away.
    attempting to install django-allauth (done, download and offline installation with vpn)
    add 'allauth' to installed apps
    no allauth.account (no social login) (THIS WILL CAUSE PROBLEMS, IT MUST BE ADDED TO INSTALLED_APPS)
    add SITE_ID.
    update AUTHENTICATION_BACKEND by adding allauth to it
    'allauth.account.auth_backends.AuthenticationBackend'
    the default ModelBackend is needed for django admin app regardless of 'allauth'
    two system app are also required. contrib.auth and contrib.messages
    add allauth middleware,
    add allauth.urls to project urls.py
    now run migrate command
    (at this point i'm combining allauth's doc with wsv's book)
    add login and logout redirect
    forgot to add  "django.contrib.sites", to installed_apps
    problem: migration output does not appear to be enough
    appears to be FIXED: should have added allauth.account as well (thaught this was for social stuff)
    wsv tutorial said to add this: ACCOUNT_EMAIL_VERIFICATION
    i don't know what it is, but apparently it can be changed later.
    now testing actual functionality:
    signup: ok - UserProfile created.
    login: ok - (it's called sign in)
    logout: ok - (called sign out)
    commiting.
    need to enable email only login, and check out the new headless features.
    added ACCOUNT_SESSION_REMEMBER = True
    we can also customize the intermediary logout page.
    accoding to wsv, actually removing username field requires using abstractBaseUser and much more work.
    GOOD, everything seems ok. email only signup and login work.


    


authentication note:
permission and throttling policies can use credentials to determine if request should be permitted.

request.user -> contrib.auth's -> User class

request.auth

Note: Don't forget that authentication by itself won't allow or disallow an incoming request, it simply identifies the credentials that the request was made with.

(NOTE: this topic is closely related to permissions)

The authentication schemes are always defined as a list of classes. REST framework will attempt to authenticate with each class in the list, and will set request.user and request.auth using the return value of the first class that successfully authenticates.

if no class authenticates, request.user = django.contrib.auth.models.AnonymousUser
and request.auth = None

authentication schemes can be set in DEFAULT_AUTHENTICATION_CLASSES setting (globally) or per-view using authentication_classes.

to add login to browsable api:
    add the following path to project level urls.py
    path('api-auth/', include('rest_framework.urls')),



logger app:
signals can be used to implement a sort of logging system
e.g. accounts app can send a signal every time a user registers